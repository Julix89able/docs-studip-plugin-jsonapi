
# Dateibereich

In Stud.IP hat jeder Nutzer, jede Einrichtung und jede Veranstaltung
einen eigenen Dateibereich. Dateibereiche sind (spezielle) Ordner.
Ordner können Dateien und Ordner enthalten, in denen sich wiederum
Dateien und Ordner befinden können.

Es gibt verschiedene Arten von Ordnern, die sich in der Regel darin
unterscheiden, wer sie sehen kann und wer Lese- und/oder
Schreibzugriff auf diese Ordner hat.

## Dateibereich in Veranstaltungen

```javascript
TODO
```

> The above command returns JSON structured like this:

```json
{

    "data": {
        "type": "folders",
        "id": "b36a77af8f2c4c6e5065fd90ada88803",
        "attributes": {
            "folder-type": "RootFolder",
            "name": "Vorlesung: Test Lehrveranstaltung",
            "data_content": null,
            "description": null,
            "mkdate": "2017-08-08T14:45:19+02:00",
            "chdate": "2017-08-08T14:45:19+02:00"
        },
        "relationships": {
            "range": {
                "links": {
                    "related": "https://example.com/jsonapi/courses/a07535cf2f8a72df33c12ddfa4b53dde"
                }
            },
            "subfolders": {
                "meta": {
                    "count": 0
                },
                "links": {
                    "related": "https://example.com/jsonapi/folders/b36a77af8f2c4c6e5065fd90ada88803/subfolders"
                }
            },
            "files": {
                "meta": {
                    "count": 0
                },
                "links": {
                    "related": "https://example.com/jsonapi/folders/b36a77af8f2c4c6e5065fd90ada88803/files"
                }
            }
        },
        "links": {
            "self": "https://example.com/jsonapi/folders/b36a77af8f2c4c6e5065fd90ada88803"
        }
    }

}
```

Wenn in einer Veranstaltung der Dateibereich aktiviert ist, erhält man
mit der ID der Veranstaltung über diesen Endpoint den Wurzelordner der Veranstaltung.

### HTTP Request

`GET https://example.com/jsonapi/courses/{id}/files`

### URL-Parameter

Parameter |  Beschreibung
--------- | -------
id        | die ID der Veranstaltung

<aside class="success">
Remember — a happy kitten is an authenticated kitten!
</aside>

<%#
## Get a Specific Kitten

```ruby
require 'kittn'

api = Kittn::APIClient.authorize!('meowmeowmeow')
api.kittens.get(2)
```

```python
import kittn

api = kittn.authorize('meowmeowmeow')
api.kittens.get(2)
```

```shell
curl "http://example.com/jsonapi/kittens/2"
  -H "Authorization: meowmeowmeow"
```

```javascript
const kittn = require('kittn');

let api = kittn.authorize('meowmeowmeow');
let max = api.kittens.get(2);
```

> The above command returns JSON structured like this:

```json
{
  "id": 2,
  "name": "Max",
  "breed": "unknown",
  "fluffiness": 5,
  "cuteness": 10
}
```

This endpoint retrieves a specific kitten.

<aside class="warning">Inside HTML code blocks like this one, you can't use Markdown, so use <code>&lt;code&gt;</code> blocks to denote code.</aside>

### HTTP Request

`GET http://example.com/kittens/<ID>`

### URL Parameters

Parameter | Description
--------- | -----------
ID | The ID of the kitten to retrieve

## Delete a Specific Kitten

```ruby
require 'kittn'

api = Kittn::APIClient.authorize!('meowmeowmeow')
api.kittens.delete(2)
```

```python
import kittn

api = kittn.authorize('meowmeowmeow')
api.kittens.delete(2)
```

```shell
curl "http://example.com/jsonapi/kittens/2"
  -X DELETE
  -H "Authorization: meowmeowmeow"
```

```javascript
const kittn = require('kittn');

let api = kittn.authorize('meowmeowmeow');
let max = api.kittens.delete(2);
```

> The above command returns JSON structured like this:

```json
{
  "id": 2,
  "deleted" : ":("
}
```

This endpoint deletes a specific kitten.

### HTTP Request

`DELETE http://example.com/kittens/<ID>`

### URL Parameters

Parameter | Description
--------- | -----------
ID | The ID of the kitten to delete

## Was man mit einem FileRef machen kann

  * [X] herunterladen (sendfile.php via FileRef)
  * [X] infos erhalten (name, beschreibung, owner, dates, größe, terms)
  * [X] bearbeiten (name, beschreibung, terms)
  * [ ] aktualisieren (dateiname übernehmen; weitere vorkommen
    aktualisieren) ([[file:~/Sync/Projects/studip/goe-git/lib/filesystem/FileManager.php::public%20static%20function%20updateFileRef(][FileManager::updateFileRef]]
  * [ ] verschieben
  * [ ] kopieren
  * [X] löschen


Dateien werden initial immer verlinkt.

Erst, wenn es relevant wird (bearbeiten, aktualisieren, löschen) wird
der Nutzer gefragt, ob Verlinkung oder Kopie gewünscht ist. Nur
Besitzer darf aktualisieren.

Wenn ein Dritter mit der Datei etwas tut (inklusive Kopieren), dann
wird eine echte Kopie angelegt und der Dritte als Besitzer eingetragen

Ordner werden immer kopiert (darin liegende Dateien verlinkt)

beim Hochladen einer Datei mit vorhandenem Namen wird nachgefragt was
gemacht werden soll

Aktualisieren im Bearbeiten-Dialog

es gibt keine vom Dateinamen abweichenden Titel mehr
%>
